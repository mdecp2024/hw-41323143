<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323143">https://github.com/mdecp2024/hw-41323143</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41323143/content/index.html">https://mdecp2024.github.io/hw-41323143/content/index.html</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/dTkwab-BDc0" title="cp hw   Google Chrome 2024 10 24 14 32 27" width="653"></iframe></p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/dTkwab-BDc0" title="cp hw   Google Chrome 2024 10 24 14 32 27" width="653"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="514" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Lhly99fY2bU" title="cp hw   Google Chrome 2024 10 24 19 09 08" width="968"></iframe></p>
<h3>w9</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#help(range)
for i in range(1,5):
    print(i)
def print_pyramid(n):
    for i in range(n):
        # 打印空格
        print(' ' * (n - i - 1), end='')
        # 打印星號
        print('*' * (2 * i + 1))

# 設定金字塔的高度
height = 5
print_pyramid(height)
</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">1
2
3
4
    *
   ***
  *****
 *******
*********
&gt;Exit code: 0</pre>
<p><img alt="" height="449" src="/images/螢幕擷取畫面 2024-11-14 011050.png" width="800"/> <img alt="" height="449" src="/images/螢幕擷取畫面 2024-11-14 011243.png" width="800"/></p>
<h3>w10</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="486" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/HAR6uMZ5hxs" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目一:41323143" width="864"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="486" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Cb6QcSNz37w" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目二:41323143" width="864"></iframe></p>
<ol>
<li>
<p><strong>變數名稱不能使用關鍵字</strong>：<br/>關鍵字（Keywords）是 Python 保留用來表示特定語法的詞，不能用來當作變數名稱。例如，<code>for</code>、<code>while</code>、<code>if</code> 等詞語具有特定的功能，無法用作變數名稱。</p>
</li>
<li>
<p><strong>變數名稱區分大小寫</strong>：<br/>Python 的變數名稱是大小寫敏感的，<code>age</code> 和 <code>Age</code> 會被視為兩個不同的變數名稱。這意味著在命名變數時需小心，以避免因大小寫不同而造成混淆。</p>
</li>
<li>
<p><strong>遵循 PEP 8 命名規範</strong>：</p>
<ul>
<li>一般變數和函數名稱應使用<strong>小寫字母</strong>，並用底線 <code>_</code> 分隔多個單字（例如：<code>user_name</code>）。</li>
<li>常數（固定不變的值）名稱通常使用<strong>大寫字母</strong>，並用底線 <code>_</code> 分隔（例如：<code>MAX_LIMIT</code>）。</li>
<li>類別名稱則使用駝峰命名法（CamelCase），即首字母和每個新單字的首字母大寫（例如：<code>StudentInfo</code>）。</li>
</ul>
</li>
<li>
<p><strong>避免覆蓋內建函數名稱</strong>：<br/>Python 有許多內建函數和物件名稱，如 <code>print</code>、<code>sum</code>、<code>list</code> 等，這些名稱具有特定的功能。如果使用相同名稱定義變數，會覆蓋這些內建功能，造成程式錯誤或意料之外的行為。例如，如果將變數命名為 <code>print</code>，則內建的 <code>print()</code> 函數會被覆蓋，之後的 <code>print()</code> 將無法正常使用。</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="486" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/0a6c1HXCrdM" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目三:41323143" width="864"></iframe>                 </p>
<p></p>
<p> </p>
<p></p>
<p> 心得:讓我更熟悉了</p>
</li>
</ol>
<h3>w11_hw</h3>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p>第一題: <a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/430f5cade2c20b1cea0a0f17aa666a5f/raw/f0885777edcf7ce04a36f40b3161682a92fe9148/hw1.py">以 "*" 字元列印出圓型區域</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 設定圓心與半徑
h, k = 5, 5  # 圓心位置 (5, 5)
r = 4         # 圓的半徑

# 10x10 的字元區域
for y in range(1, 11):  # y 軸從 1 到 10
    line = ""
    for x in range(1, 11):  # x 軸從 1 到 10
        # 計算該點 (x, y) 到圓心的距離
        distance = ((x - h) ** 2 + (y - k) ** 2) ** 0.5
        # 如果距離小於或等於半徑，則打印 "*"，以形成實心圓形
        if distance &lt;= r:
            line += "＊"  # 使用全形星號
        else:
            line += "　"  # 使用全形空格
    print(line)
</pre>
<p></p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p>第二題:<a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/430f5cade2c20b1cea0a0f17aa666a5f/raw/f0885777edcf7ce04a36f40b3161682a92fe9148/hw2.py">網頁上的方格與塗色<br/><br/></a></p>
<script type="text/python">
# write your Brython codes here
</script>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math

# Create canvas element
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# Each grid square's pixel size
gs = 20
radius = 5  # Set the radius of the circle
cx, cy = 5, 5  # Set the center of the circle (in grid coordinates)

# Get the drawing context
ctx = canvas.getContext("2d")

def dRect(lux, luy, w, h, s=1, c='#ff0000'):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath()
    ctx.rect(lux, luy, w, h)
    ctx.stroke()

def grid(width, height, grid_pix):
    # Create grid with width x height number of grid cells
    for i in range(width):
        for j in range(height):
            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")

def fill(x, y, color):
    # Fill the grid cell with the specified color
    ctx.fillStyle = color
    ctx.fillRect(x - 1, y - 1, gs, gs)

def draw_filled_circle(radius, cx, cy):
    # Create a filled circle using grid squares
    for i in range(10):  # Iterate over the grid width (10 squares)
        for j in range(10):  # Iterate over the grid height (10 squares)
            # Calculate the center of the current grid square
            center_x = i + 0.5
            center_y = j + 0.5
            # Check if this grid square falls inside the circle
            if (center_x - cx) ** 2 + (center_y - cy) ** 2 &lt;= radius ** 2:
                fill(i * gs, j * gs, "black")  # Fill with black

# Draw the grid
grid(10, 10, 20)

# Draw a filled circle at the center (cx, cy) with the specified radius
draw_filled_circle(radius, cx, cy)
</pre>
<p></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="533" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/s-tNmr_H71s" title="w11 41323143 一二題" width="1519"></iframe></p>
<h3>w12_hw</h3>
<p style="text-align: left;">1. 請各組組員分別利用<span> </span><span>Brython 以及 Jupyter lab</span><span> </span>環境, 執行<a href="http://229.cycu.org/python_2025_lite.7z">可攜程式</a><span> </span>notebook 目錄中的<span> </span><span>01_string_input_print.ipynb 至 10_for_search.ipynb</span><span> </span>筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人<span> </span><span>Gist</span><span> </span>後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得.</p>
<p style="text-align: left;"><span style="color: #000000;">第一題:<em>input與 print</em></span></p>
<p style="text-align: left;"><em><span>  input範例程式：<a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/d330204fd1c7692d9adb8fca6d0b6068/raw/fa025bf0a3fd176ba1aa3154dd6ca287c6b31476/hw1.py">你叫啥</a></span></em></p>
<p style="text-align: left;"><span face="monospace" style="font-family: monospace;"><b> </b>說明:</span>顯示提示訊息 「你叫啥」,等待使用者輸入,將使用者輸入的內容（字串形式）傳回。 </p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">input("你叫啥 ")</pre>
<p style="text-align: left;"><em>print<span>範例程式：<a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/d330204fd1c7692d9adb8fca6d0b6068/raw/fa025bf0a3fd176ba1aa3154dd6ca287c6b31476/hw2.py">貓咪</a></span></em></p>
<p style="text-align: left;">說明：<code>print()</code> 函式：</p>
<p style="text-align: left;">用來在終端（或控制台）中顯示內容。</p>
<p style="text-align: left;">每行的內容由雙引號（或單引號）包裹。</p>
<p style="text-align: left;">每行的內容解析：<code>print(" /\_/\ ")</code>： 顯示貓耳朵和頭部的上半部分：<code>/\_/\</code>。</p>
<p style="text-align: left;"><code>print(" &gt;^.^&lt; ")</code>： 顯示貓咪的臉部：<code>&gt;^.^&lt;</code>。</p>
<p style="text-align: left;"><code>print(" / \\ ")</code>： 顯示貓咪的身體底部和爪子的形狀：<code>/ \</code>。 注意：這裡的 <code>\\</code> 是為了顯示單個反斜槓 <code>\</code>，因為  反斜槓在 Python 中是特殊字符（用於轉義）。</p>
<p style="text-align: left;"><code>print(" (___)___")</code>： 顯示貓咪的身體和尾巴的樣式。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">print (" /\_/\   ")
print (" &gt;^.^&lt;   ")
print ("  / \    ")
print (" (___)___")</pre>
<p style="text-align: left;"></p>
<p style="text-align: left;">第二題:variables</p>
<p style="text-align: left;">2-1範例:<a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/d330204fd1c7692d9adb8fca6d0b6068/raw/03321f2cd3a0ad4f965287f6c940ef43dff9d199/hw3.py">名字</a></p>
<p style="text-align: left;">說明:這段程式碼定義兩個字串變數 <code>first_name</code> 和 <code>last_name</code>，分別儲存名字和姓氏，然後用 <code>print()</code> 函式輸出這些值。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">first_name = "Fernando"  # 定義變數 first_name，內容是字串 "Fernando"
last_name  = "Pérez"     # 定義變數 last_name，內容是字串 "Pérez"
print(first_name)        # 將變數 first_name 的內容輸出到終端
print(last_name)         # 將變數 last_name 的內容輸出到終端</pre>
<p style="text-align: left;">2-2範例:<a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/d330204fd1c7692d9adb8fca6d0b6068/raw/23a43a374efd3e0dc577ffba6d81abc26c0034c7/hw4.py">名子+喜歡的食物</a></p>
<p style="text-align: left;">說明:一個簡單的互動式程式，功能是詢問使用者名字和最喜歡的食物，然後輸出相關訊息。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">name = input("What's your name? ")  # 提示使用者輸入名字
favorite_food = input("What is your favorite food? ")  # 提示使用者輸入最喜歡的食物

print("Hi! My name is " + name)  # 顯示名字
print("My favorite food is " + favorite_food)  # 顯示最喜歡的食物
print(name + "'s favorite food is " + favorite_food)  # 顯示完整句子
</pre>
<p style="text-align: left;"> 第三題:list_if_in_else</p>
<p style="text-align: left;">範例:<a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/d330204fd1c7692d9adb8fca6d0b6068/raw/78bec61e774e64e7f2bf94ba5e23f861e53e4420/hw5.py">購買書籍</a></p>
<p style="text-align: left;">說明:程式碼會顯示一個書籍清單，然後詢問使用者想購買的書籍。如果使用者選擇的書籍在清單中，程式會顯示「有售」，否則顯示「無售」。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">programming_books = ["Learn python", "Python for all", "Intro to python"]  # 定義書籍清單
print(programming_books)  # 顯示可選擇的書籍

wanted_book = input("Hi! What book would you like to buy?")  # 提示使用者輸入想購買的書籍名稱
print(wanted_book)  # 顯示使用者輸入的書籍名稱

# 判斷書籍是否在可購買清單中
if wanted_book in programming_books:
    print("Yes, we sell it!")  # 書籍在清單中，顯示有售
else:
    print("Sorry, we don't sell that book")  # 書籍不在清單中，顯示無售</pre>
<p style="text-align: left;">第四題:list_append_remove</p>
<p style="text-align: left;">範例:<a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/d330204fd1c7692d9adb8fca6d0b6068/raw/c03af69c566dc9a8b0dae00614a09a019d2d0fa3/hw6.py">購物清單</a></p>
<p style="text-align: left;">說明:顯示目前的購物清單,提示使用者輸入想要新增的項目。</p>
<p style="text-align: left;">如果該項目已經在清單中，顯示已存在；如果沒有，將其添加到清單中,提示使用者輸入要刪除的項目。</p>
<p style="text-align: left;">如果該項目存在於清單中，就將其刪除，並顯示更新後的清單。如果該項目不在清單中，顯示錯誤訊息。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">shopping_list = ["carrots", "chocolate", "olives"]  # 初始購物清單
print(shopping_list)  # 顯示當前購物清單

new_item = input("What else do I have to buy?")  # 提示使用者輸入想買的物品

# 檢查新項目是否已在清單中
if new_item in shopping_list:
    print(new_item + " is/are already in the shopping list")  # 如果已有此項目，顯示提示
    print(shopping_list)  # 顯示目前的清單
else:
    shopping_list.append(new_item)  # 否則將新項目加入清單
    print(shopping_list)  # 顯示更新後的清單

item_to_remove = input("What do I have to remove?")  # 提示使用者輸入要刪除的物品

# 檢查要刪除的項目是否在清單中
if item_to_remove in shopping_list:
    shopping_list.remove(item_to_remove)  # 如果在清單中，將其刪除
    print(shopping_list)  # 顯示更新後的清單
else:
    print(item_to_remove + " is/are not in the list")  # 如果不在清單中，顯示錯誤訊息
    print(shopping_list)  # 顯示未變動的清單
</pre>
<p></p>
<p></p>
<h3>w13_hw</h3>
<p></p>
<p><a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/4eb66d5d6d4f823b7134b3c74db3a68b/raw/f37bb19d43318135079285abbdce482e7e29d514/w13_hw.py">w13 作業</a></p>
<p>請在下列圖形中的兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色. 操作過程請拍攝影片, 並在頁面中列出作業心得.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js">
</script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 創建畫布元素
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 定義圓心和半徑
x1, y1 = 200, 200  # 第一個圓的圓心
x2, y2 = 300, 300  # 第二個圓的圓心
radius = 141.4  # 圓的半徑

ctx = canvas.getContext("2d")

# 繪製第一個圓（填充顏色和邊框顏色）
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.fillStyle = "lightyellow"  # 第一個圓的填充顏色
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "black"  # 第一個圓的邊框顏色
ctx.stroke()

# 繪製第二個圓（填充顏色和邊框顏色）
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "mediumseagreen"  # 第二個圓的填充顏色
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "black"  # 第二個圓的邊框顏色
ctx.stroke()

# 填充兩個圓的交集區域
ctx.save()
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.clip()  # 設置剪裁區域為第一個圓
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "skyblue"  # 交集區域的顏色
ctx.fill()
ctx.restore()

# 繪製第一個正方形（紅色邊框，紫色填充）
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.fillStyle = "purple"  # 第一個正方形的填充顏色
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "red"  # 第一個正方形的邊框顏色
ctx.stroke()

# 繪製第二個正方形（紅色邊框，粉紅色填充）
ctx.beginPath()
ctx.rect(200, 200, 200, 200)
ctx.fillStyle = "pink"  # 第二個正方形的填充顏色
ctx.fill()
ctx.stroke()

# 繪製圓形邊框（黑色邊框）
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.lineWidth = 3  # 設置圓形邊框的寬度
ctx.strokeStyle = "black"  # 第一個圓的邊框顏色
ctx.stroke()

ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.lineWidth = 3  # 設置圓形邊框的寬度
ctx.strokeStyle = "black"  # 第二個圓的邊框顏色
ctx.stroke()

# 現在繪製對角線，並分開處理
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.strokeStyle = "blue"  # 對角線顏色
ctx.lineWidth = 2  # 設置對角線的寬度
ctx.stroke()
</pre>
</div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc

# 創建畫布元素
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

# 定義圓心和半徑
x1, y1 = 200, 200  # 第一個圓的圓心
x2, y2 = 300, 300  # 第二個圓的圓心
radius = 141.4  # 圓的半徑

ctx = canvas.getContext("2d")

# 繪製第一個圓（填充顏色和邊框顏色）
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.fillStyle = "lightyellow"  # 第一個圓的填充顏色
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "black"  # 第一個圓的邊框顏色
ctx.stroke()

# 繪製第二個圓（填充顏色和邊框顏色）
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "mediumseagreen"  # 第二個圓的填充顏色
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "black"  # 第二個圓的邊框顏色
ctx.stroke()

# 填充兩個圓的交集區域
ctx.save()
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.clip()  # 設置剪裁區域為第一個圓
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "skyblue"  # 交集區域的顏色
ctx.fill()
ctx.restore()

# 繪製第一個正方形（紅色邊框，紫色填充）
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.fillStyle = "purple"  # 第一個正方形的填充顏色
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "red"  # 第一個正方形的邊框顏色
ctx.stroke()

# 繪製第二個正方形（紅色邊框，粉紅色填充）
ctx.beginPath()
ctx.rect(200, 200, 200, 200)
ctx.fillStyle = "pink"  # 第二個正方形的填充顏色
ctx.fill()
ctx.stroke()

# 繪製圓形邊框（黑色邊框）
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.lineWidth = 3  # 設置圓形邊框的寬度
ctx.strokeStyle = "black"  # 第一個圓的邊框顏色
ctx.stroke()

ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.lineWidth = 3  # 設置圓形邊框的寬度
ctx.strokeStyle = "black"  # 第二個圓的邊框顏色
ctx.stroke()

# 現在繪製對角線，並分開處理
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.strokeStyle = "blue"  # 對角線顏色
ctx.lineWidth = 2  # 設置對角線的寬度
ctx.stroke()
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 2. 繪製對角線 (藍色) - 只連接第一個矩形的左上角和第一個矩形的右下角
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath()
ctx.moveTo(100, 100)  # 起點為第一個矩形的左上角 (100, 100)
ctx.lineTo(300, 300)  # 終點為第一個矩形的右下角 (300, 300)
ctx.stroke()
</script>
</p>
<h3>w14_ex</h3>
<p>請根據兩個圓繪圖所圍成的區域(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</p>
<p><span>修改為<a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/2a118e95e7bb3eb8d5cac456b67880c9/raw/496255bb1c00650e1b512a668a6fc1969dfd4b31/W14_ex.py">三個圓的區域塗色任務</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    # 創建畫布元素並設置大小
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    # 獲取指定 id 的 div 元素，並將畫布添加進去
    brython_div = doc[id]
    brython_div &lt;= canvas

    # 返回 2D 繪圖上下文
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    """
    生成一個隨機的 RGB 顏色字符串。
    返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。
    """
    # 隨機生成 RGB 三個分量
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    """
    判斷一個點是否位於指定圓內。
    px, py: 點的座標
    cx, cy: 圓心座標
    r: 圓的半徑
    """
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 三個圓的區域塗色函式
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    """
    繪製三個圓及其交集區域，使用不同顏色區分。
    x1, y1, r1: 第一個圓的圓心和半徑
    x2, y2, r2: 第二個圓的圓心和半徑
    x3, y3, r3: 第三個圓的圓心和半徑
    """
    # 初始化畫布
    canvas, ctx = initialize_canvas(400, 400)
    # 清空畫布
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    # 用於存儲不同區域顏色的字典
    color_dict = {}

    # 逐行掃描每個像素
    for py in range(0, canvas.height):
        for px in range(0, canvas.width):
            # 判斷該點是否在每個圓內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)

            # 根據點的狀態選擇顏色
            if in_circle1 and in_circle2 and in_circle3:
                if "intersection_all" not in color_dict:
                    color_dict["intersection_all"] = random_color_generator()
                current_color = color_dict["intersection_all"]
            elif in_circle1 and in_circle2:
                if "intersection_12" not in color_dict:
                    color_dict["intersection_12"] = random_color_generator()
                current_color = color_dict["intersection_12"]
            elif in_circle1 and in_circle3:
                if "intersection_13" not in color_dict:
                    color_dict["intersection_13"] = random_color_generator()
                current_color = color_dict["intersection_13"]
            elif in_circle2 and in_circle3:
                if "intersection_23" not in color_dict:
                    color_dict["intersection_23"] = random_color_generator()
                current_color = color_dict["intersection_23"]
            elif in_circle1:
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                current_color = "white"

            # 塗色當前像素
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)

# 從使用者輸入獲取三個圓的圓心和半徑
def get_circle_input():
    """
    提示使用者輸入三個圓的圓心座標和半徑。
    返回三個圓的參數。
    """
    print("請輸入三個圓的圓心座標和半徑：")
    x1, y1, r1 = map(int, input("輸入圓1 (x y r)：").split())
    x2, y2, r2 = map(int, input("輸入圓2 (x y r)：").split())
    x3, y3, r3 = map(int, input("輸入圓3 (x y r)：").split())
    return x1, y1, r1, x2, y2, r2, x3, y3, r3

# 主程式開始，從使用者輸入獲取圓的參數，並進行繪製
x1, y1, r1, x2, y2, r2, x3, y3, r3 = get_circle_input()
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)
</pre>
<p></p>
<h3>w15</h3>
<p>題目一: 請利用 Gist 與 Brython 程式環境, 在個人的課程網站中新增一個頁面, 標題為 w15, 以"<a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/10199968200fdf7336cf25221b4ef405/raw/13e75124455a05c651e0b9e0215d2917fcbb5c9d/hw1.py">從 1 累加到 100</a>"作為 anchor 的連結標題, 使用者點擊該連結之後, 可從各自的 Brython 頁面執行程式.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 初始化變數 sum 為 0，用來儲存累加的結果
sum = 0

# 使用 for 迴圈，從 0 到 100（包含 100）逐一遍歷
# range(0, 101) 代表數字序列從 0 到 100
for i in range(0, 101):
    # 將目前的數字 i 累加到 sum
    sum += i

# 將累加結果輸出到畫面
print(sum)</pre>
<p><span>題目二: 延伸上題, 設計一個函式 <a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/10199968200fdf7336cf25221b4ef405/raw/1784b3c9cf36f86b7a434352607bded7eef6e24b/hw2.py">addto</a>(1, 100), 可以完成上述的累加結果. </span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(start, end):
    """
    計算從 start 到 end 之間所有整數的總和。
    
    參數：
    start: 開始的整數
    end: 結束的整數（包含在內）

    返回：
    整數總和
    """
    sum = 0  # 初始化總和為 0
    for i in range(start, end + 1):  # 從 start 累加到 end，包含 end
        sum += i  # 將當前數字加入總和
    return sum  # 返回計算的總和

# 測試函式
result = addto(1, 100)  # 計算 1 到 100 的總和
print(result)  # 輸出結果</pre>
<p><span>題目三: 延伸上題, 設計一個函式 <a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/10199968200fdf7336cf25221b4ef405/raw/76c3ce63b9e8bdd6627680478d1164c316d06ac2/hw3.py">add_only_even</a>(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果, 但只納入偶數. 頁面中請以 add_only_even 作為連結標題.</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_only_even(start, end):
    # 初始化變數 sum 為 0，用來儲存偶數的累加結果
    sum = 0
    
    # 使用 for 迴圈，從 start 到 end（包含 end），逐一遍歷
    for i in range(start, end + 1):
        # 檢查 i 是否為偶數
        if i % 1 == 0:
            # 如果是偶數，就將其加到 sum
            sum += i
            # 輸出目前的累加結果
            print(f"{sum}")

# 範例：從 1 到 100 累加偶數
add_only_even(1, 100)
</pre>
<p><span>題目四: 延伸上題, 設計一個函式 <a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/10199968200fdf7336cf25221b4ef405/raw/e305de96473724c259e2669ae4cc4261b31efefe/hw4.py">add_avoid_8</a>(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加過程, 必須避開數字出現"8"的整數</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_avoid_8(start, end):
    # 初始化變數 sum 為 0，用來儲存累加結果
    sum = 0
    
    # 使用 for 迴圈，從 start 到 end（包含 end），逐一遍歷
    for i in range(start, end + 1):
        # 檢查 i 是否包含數字 '8'
        if '8' not in str(i):  # 將 i 轉為字串來檢查是否包含 '8'
            # 如果不包含 '8'，就將其加到 sum
            sum += i
            # 輸出目前的累加結果
            print(f" {sum}")
    
    # 返回累加結果
    return sum

# 範例：從 1 到 100 累加不包含 '8' 的整數
result = add_avoid_8(1, 100)
print(f"")
</pre>
<p></p>
<p>上課延伸:<a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/10199968200fdf7336cf25221b4ef405/raw/76c3ce63b9e8bdd6627680478d1164c316d06ac2/hw5.py">3092</a></p>
<p>這些函式展示了 Python 的基礎控制結構（<code>for</code> 迴圈、條件判斷）、數學運算（加法、取餘運算）、字串操作（轉型與檢查）以及函式的封裝能力</p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<p>  </p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p><span>題目: 請以</span><span>自己的學號最後四碼</span><span>作為繪圖的座標原點, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖座標原點), 並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸, 並且利用文字標示出原點座標 (例如: (39, 32)), 之後請自選最左側圖形的起始點座標, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像 (</span><a href="https://www.ccplusmedia.com/wp-content/uploads/2019/10/creative-ad_landscape3.jpg">圖片來源</a><span>).</span></p>
<p>解:<a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/f13368bef594ea33da6fdde9a321a59a/raw/749e107319a93af093eb90817bf409eb9e638a61/w16-1.py">exam1</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math

# 初始化畫布
def initialize_canvas(canvas_width=1000, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div &lt;= canvas
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 繪製六邊形
def draw_hexagon(ctx, center_x, center_y, size, color):
    """
    繪製一個六邊形。
    center_x, center_y: 六邊形的中心座標
    size: 六邊形的邊長
    color: 六邊形的顏色
    """
    ctx.beginPath()
    for i in range(6):
        angle = math.radians(60 * i)
        x = center_x + size * math.cos(angle)
        y = center_y + size * math.sin(angle)
        if i == 0:
            ctx.moveTo(x, y)
        else:
            ctx.lineTo(x, y)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製直立菱形
def draw_rhombus(ctx, center_x, center_y, width, height, color):
    """
    繪製一個直立的菱形，邊與 X 軸和 Y 軸平行。
    center_x, center_y: 菱形的中心座標
    width: 菱形的寬度
    height: 菱形的高度
    color: 菱形的顏色
    """
    ctx.beginPath()
    ctx.moveTo(center_x - width / 2, center_y)  # 左頂點
    ctx.lineTo(center_x, center_y - height / 2)  # 上頂點
    ctx.lineTo(center_x + width / 2, center_y)  # 右頂點
    ctx.lineTo(center_x, center_y + height / 2)  # 下頂點
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製正三角形
def draw_triangle(ctx, center_x, center_y, size, color):
    """
    繪製一個正三角形。
    center_x, center_y: 三角形的中心座標
    size: 三角形的邊長
    color: 三角形的顏色
    """
    height = math.sqrt(3) * size / 2  # 正三角形的高度
    # 正三角形的頂點位置需要調整，使其對齊菱形中心
    ctx.beginPath()
    ctx.moveTo(center_x - size / 2, center_y + height / 2)  # 左底點
    ctx.lineTo(center_x + size / 2, center_y + height / 2)  # 右底點
    ctx.lineTo(center_x, center_y - height / 2)  # 上頂點
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製圓形
def draw_circle(ctx, center_x, center_y, radius, color):
    """
    繪製一個圓形。
    center_x, center_y: 圓形的中心座標
    radius: 圓形的半徑
    color: 圓形的顏色
    """
    ctx.beginPath()
    ctx.arc(center_x, center_y, radius, 0, 2 * math.pi)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製正方形
def draw_square(ctx, center_x, center_y, size, color):
    """
    繪製一個正方形。
    center_x, center_y: 正方形的中心座標
    size: 正方形的邊長
    color: 正方形的顏色
    """
    ctx.beginPath()
    ctx.rect(center_x - size / 2, center_y - size / 2, size, size)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製長方形
def draw_rectangle(ctx, center_x, center_y, width, height, color):
    """
    繪製一個長方形。
    center_x, center_y: 長方形的中心座標
    width: 長方形的寬度
    height: 長方形的高度
    color: 長方形的顏色
    """
    ctx.beginPath()
    ctx.rect(center_x - width / 2, center_y - height / 2, width, height)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製坐標軸和原點標註
def draw_axes_and_origin(ctx, origin_x, origin_y):
    """
    繪製坐標軸和原點標註。
    origin_x, origin_y: 原點位置
    """
    # 設置顏色為黑色
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    
    # 繪製 X 軸 (向右為正)
    ctx.beginPath()
    ctx.moveTo(0, origin_y)
    ctx.lineTo(1000, origin_y)  # 延長到畫布的最右端
    ctx.stroke()
    
    # 繪製 Y 軸 (向下為正)
    ctx.beginPath()
    ctx.moveTo(origin_x, 0)
    ctx.lineTo(origin_x, 400)  # 延長到畫布的底端
    ctx.stroke()
    
    # 標註原點 (31, 43)
    ctx.fillStyle = "black"
    ctx.font = "16px Arial"
    ctx.fillText(f"原點(31, 43)", origin_x + 10, origin_y - 10)  # 原點附近顯示文字

# 繪製所有圖形
def draw_shapes():
    # 初始化畫布
    canvas, ctx = initialize_canvas(1000, 400)

    # 原點位置 (31, 43)
    origin_x = 31
    origin_y = 43
    
    # 先繪製坐標軸
    draw_axes_and_origin(ctx, origin_x, origin_y)

    # 圖形大小和位置參數
    y_center = 200  # 所有圖形的 Y 軸中心位置
    spacing = 120  # 圖形之間的間隔

    # 六邊形
    hexagon_size = 40  # 六邊形的邊長
    draw_hexagon(ctx, 100, y_center, hexagon_size, "orange")

    # 直立菱形
    rhombus_width = 60  # 菱形的寬度 
    rhombus_height = 80  # 菱形的高度 
    draw_rhombus(ctx, 100 + spacing, y_center, rhombus_width, rhombus_height, "green")

    # 正三角形，計算三角形的位置，使頂點與菱形中心對齊
    triangle_size = 60  # 正三角形的邊長
    triangle_x = 100 + spacing + rhombus_width / 2  # 三角形的 X 座標
    triangle_y = y_center + rhombus_height / 2  # 三角形的 Y 座標 (使頂點對齊菱形的中心)
    draw_triangle(ctx, triangle_x, triangle_y, triangle_size, "blue")

    # 圓形
    circle_radius = 40  # 圓形的半徑
    draw_circle(ctx, 100 + 2 * spacing, y_center, circle_radius, "pink")

    # 正方形
    square_size = 60  # 正方形的邊長
    draw_square(ctx, 100 + 3 * spacing, y_center, square_size, "yellow")

    # 長方形
    rectangle_width = 100  # 長方形的寬度
    rectangle_height = 60  # 長方形的高度
    draw_rectangle(ctx, 100 + 4 * spacing, y_center, rectangle_width, rectangle_height, "blue")

# 主程式開始
draw_shapes()
</pre>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="477" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/7P7FTAiYiKQ" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - w16_exam1: 41323143" width="1045"></iframe></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

# 初始化畫布
def initialize_canvas(canvas_width=1000, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div <= canvas
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 繪製六邊形
def draw_hexagon(ctx, center_x, center_y, size, color):
    """
    繪製一個六邊形。
    center_x, center_y: 六邊形的中心座標
    size: 六邊形的邊長
    color: 六邊形的顏色
    """
    ctx.beginPath()
    for i in range(6):
        angle = math.radians(60 * i)
        x = center_x + size * math.cos(angle)
        y = center_y + size * math.sin(angle)
        if i == 0:
            ctx.moveTo(x, y)
        else:
            ctx.lineTo(x, y)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製直立菱形
def draw_rhombus(ctx, center_x, center_y, width, height, color):
    """
    繪製一個直立的菱形，邊與 X 軸和 Y 軸平行。
    center_x, center_y: 菱形的中心座標
    width: 菱形的寬度
    height: 菱形的高度
    color: 菱形的顏色
    """
    ctx.beginPath()
    ctx.moveTo(center_x - width / 2, center_y)  # 左頂點
    ctx.lineTo(center_x, center_y - height / 2)  # 上頂點
    ctx.lineTo(center_x + width / 2, center_y)  # 右頂點
    ctx.lineTo(center_x, center_y + height / 2)  # 下頂點
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製正三角形
def draw_triangle(ctx, center_x, center_y, size, color):
    """
    繪製一個正三角形。
    center_x, center_y: 三角形的中心座標
    size: 三角形的邊長
    color: 三角形的顏色
    """
    height = math.sqrt(3) * size / 2  # 正三角形的高度
    # 正三角形的頂點位置需要調整，使其對齊菱形中心
    ctx.beginPath()
    ctx.moveTo(center_x - size / 2, center_y + height / 2)  # 左底點
    ctx.lineTo(center_x + size / 2, center_y + height / 2)  # 右底點
    ctx.lineTo(center_x, center_y - height / 2)  # 上頂點
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製圓形
def draw_circle(ctx, center_x, center_y, radius, color):
    """
    繪製一個圓形。
    center_x, center_y: 圓形的中心座標
    radius: 圓形的半徑
    color: 圓形的顏色
    """
    ctx.beginPath()
    ctx.arc(center_x, center_y, radius, 0, 2 * math.pi)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製正方形
def draw_square(ctx, center_x, center_y, size, color):
    """
    繪製一個正方形。
    center_x, center_y: 正方形的中心座標
    size: 正方形的邊長
    color: 正方形的顏色
    """
    ctx.beginPath()
    ctx.rect(center_x - size / 2, center_y - size / 2, size, size)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製長方形
def draw_rectangle(ctx, center_x, center_y, width, height, color):
    """
    繪製一個長方形。
    center_x, center_y: 長方形的中心座標
    width: 長方形的寬度
    height: 長方形的高度
    color: 長方形的顏色
    """
    ctx.beginPath()
    ctx.rect(center_x - width / 2, center_y - height / 2, width, height)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製坐標軸和原點標註
def draw_axes_and_origin(ctx, origin_x, origin_y):
    """
    繪製坐標軸和原點標註。
    origin_x, origin_y: 原點位置
    """
    # 設置顏色為黑色
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    
    # 繪製 X 軸 (向右為正)
    ctx.beginPath()
    ctx.moveTo(0, origin_y)
    ctx.lineTo(1000, origin_y)  # 延長到畫布的最右端
    ctx.stroke()
    
    # 繪製 Y 軸 (向下為正)
    ctx.beginPath()
    ctx.moveTo(origin_x, 0)
    ctx.lineTo(origin_x, 400)  # 延長到畫布的底端
    ctx.stroke()
    
    # 標註原點 (31, 43)
    ctx.fillStyle = "black"
    ctx.font = "16px Arial"
    ctx.fillText(f"原點(31, 43)", origin_x + 10, origin_y - 10)  # 原點附近顯示文字

# 繪製所有圖形
def draw_shapes():
    # 初始化畫布
    canvas, ctx = initialize_canvas(1000, 400)

    # 原點位置 (31, 43)
    origin_x = 31
    origin_y = 43
    
    # 先繪製坐標軸
    draw_axes_and_origin(ctx, origin_x, origin_y)

    # 圖形大小和位置參數
    y_center = 200  # 所有圖形的 Y 軸中心位置
    spacing = 120  # 圖形之間的間隔

    # 六邊形
    hexagon_size = 40  # 六邊形的邊長
    draw_hexagon(ctx, 100, y_center, hexagon_size, "orange")

    # 直立菱形
    rhombus_width = 60  # 菱形的寬度 
    rhombus_height = 80  # 菱形的高度 
    draw_rhombus(ctx, 100 + spacing, y_center, rhombus_width, rhombus_height, "green")

    # 正三角形，計算三角形的位置，使頂點與菱形中心對齊
    triangle_size = 60  # 正三角形的邊長
    triangle_x = 100 + spacing + rhombus_width / 2  # 三角形的 X 座標
    triangle_y = y_center + rhombus_height / 2  # 三角形的 Y 座標 (使頂點對齊菱形的中心)
    draw_triangle(ctx, triangle_x, triangle_y, triangle_size, "blue")

    # 圓形
    circle_radius = 40  # 圓形的半徑
    draw_circle(ctx, 100 + 2 * spacing, y_center, circle_radius, "pink")

    # 正方形
    square_size = 60  # 正方形的邊長
    draw_square(ctx, 100 + 3 * spacing, y_center, square_size, "yellow")

    # 長方形
    rectangle_width = 100  # 長方形的寬度
    rectangle_height = 60  # 長方形的高度
    draw_rectangle(ctx, 100 + 4 * spacing, y_center, rectangle_width, rectangle_height, "blue")

# 主程式開始
draw_shapes()
</script><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p><span>題目一: 請以</span><span>自己的學號最後四碼</span><span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 </span><span>pixel=2 的藍色直線</span><span>, </span><span>自訂迷宮畫布大小</span><span>, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像).</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/f13368bef594ea33da6fdde9a321a59a/raw/092601192c1c05d2abbaaf9684062b32c3054dde/w16-2.py">w16_exam2</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 建立畫布，畫布尺寸縮小為 400x400
canvas = html.CANVAS(width=400, height=400)  
brython_div = doc["brython_div1"]  # 將畫布放置於網頁中的指定 div
brython_div &lt;= canvas

# 取得 canvas 的 2D 繪圖上下文 (context)，可以用來進行繪圖
ctx = canvas.getContext("2d")

# 每一格的像素大小，調整為 50 (原為 100)
pixel_scale = 50  # 縮小每格的像素大小

# 定義原點 (31, 14) 作為起始點偏移，並將偏移值縮小
offset_x = 32 * 2  # 偏移量仍保留為兩倍放大 (原為 32，放大後為 64)
offset_y = 10 * 2  # 偏移量仍保留為兩倍放大 (原為 10，放大後為 20)

# 定義迷宮的線條，這裡使用的是一組二維坐標來描述迷宮的邊界
lines = [
    ((0, 0), (2, 0)),
    ((3, 0), (5, 0)),
    ((5, 0), (5, 5)),
    ((3, 5), (5, 5)),
    ((5, 5), (4, 5)),
    ((4, 5), (4, 3)),
    ((4, 3), (1, 3)),
    ((1, 3), (1, 4)),
    ((3, 3), (3, 2)),
    # 第二條線
    ((0, 0), (0, 5)),
    ((0, 5), (2, 5)),
    ((2, 5), (2, 4)),
    ((2, 4), (3, 4)),
    ((0, 2), (2, 2)),
    ((2, 2), (2, 1)),
    ((1, 1), (4, 1)),
    ((4, 1), (4, 2)),
]

# 設定線條顏色為藍色
ctx.strokeStyle = "blue"
# 設定線條寬度為 4 像素
ctx.lineWidth = 4

# 繪製迷宮的每一條線
for line in lines:
    start = line[0]  # 取得每條線的起點
    end = line[1]    # 取得每條線的終點
    ctx.beginPath()  # 開始繪製新的一條路徑
    ctx.moveTo(
        offset_x + start[0] * pixel_scale,  # 起點的 X 座標
        offset_y + start[1] * pixel_scale   # 起點的 Y 座標
    )
    ctx.lineTo(
        offset_x + end[0] * pixel_scale,    # 終點的 X 座標
        offset_y + end[1] * pixel_scale     # 終點的 Y 座標
    )
    ctx.stroke()  # 繪製線條

# 設定字體大小為 14px Arial，並將顏色設為紅色
ctx.font = "14px Arial"
ctx.fillStyle = "red"
# 更新座標標註，顯示新的座標 (31, 43)，並將標註位置調整
ctx.fillText("(31, 43)", offset_x + 0, offset_y -10)
</pre>
<p><span> </span></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<script type="text/python3">
from browser import html
from browser import document as doc

# 建立畫布，畫布尺寸縮小為 400x400
canvas = html.CANVAS(width=400, height=400)  
brython_div = doc["brython_div1"]  # 將畫布放置於網頁中的指定 div
brython_div <= canvas

# 取得 canvas 的 2D 繪圖上下文 (context)，可以用來進行繪圖
ctx = canvas.getContext("2d")

# 每一格的像素大小，調整為 50 (原為 100)
pixel_scale = 50  # 縮小每格的像素大小

# 定義原點 (31, 14) 作為起始點偏移，並將偏移值縮小
offset_x = 32 * 2  # 偏移量仍保留為兩倍放大 (原為 32，放大後為 64)
offset_y = 10 * 2  # 偏移量仍保留為兩倍放大 (原為 10，放大後為 20)

# 定義迷宮的線條，這裡使用的是一組二維坐標來描述迷宮的邊界
lines = [
    ((0, 0), (2, 0)),
    ((3, 0), (5, 0)),
    ((5, 0), (5, 5)),
    ((3, 5), (5, 5)),
    ((5, 5), (4, 5)),
    ((4, 5), (4, 3)),
    ((4, 3), (1, 3)),
    ((1, 3), (1, 4)),
    ((3, 3), (3, 2)),
    # 第二條線
    ((0, 0), (0, 5)),
    ((0, 5), (2, 5)),
    ((2, 5), (2, 4)),
    ((2, 4), (3, 4)),
    ((0, 2), (2, 2)),
    ((2, 2), (2, 1)),
    ((1, 1), (4, 1)),
    ((4, 1), (4, 2)),
]

# 設定線條顏色為藍色
ctx.strokeStyle = "blue"
# 設定線條寬度為 4 像素
ctx.lineWidth = 4

# 繪製迷宮的每一條線
for line in lines:
    start = line[0]  # 取得每條線的起點
    end = line[1]    # 取得每條線的終點
    ctx.beginPath()  # 開始繪製新的一條路徑
    ctx.moveTo(
        offset_x + start[0] * pixel_scale,  # 起點的 X 座標
        offset_y + start[1] * pixel_scale   # 起點的 Y 座標
    )
    ctx.lineTo(
        offset_x + end[0] * pixel_scale,    # 終點的 X 座標
        offset_y + end[1] * pixel_scale     # 終點的 Y 座標
    )
    ctx.stroke()  # 繪製線條

# 設定字體大小為 14px Arial，並將顏色設為紅色
ctx.font = "14px Arial"
ctx.fillStyle = "red"
# 更新座標標註，顯示新的座標 (31, 43)，並將標註位置調整
ctx.fillText("(31, 43)", offset_x + 0, offset_y -10)
</script>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="477" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/gIj5LOcq7ec" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - w16_exam2: 41323143" width="1045"></iframe></p><h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<p>    </p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam3</h3>
<p><span>題目一: 請以</span><span>自己的學號最後四碼</span><span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 </span><span>pixel=2 的黑色直線</span><span>, </span><span>自訂迷宮畫布大小</span><span>, 直接在頁面畫出下列圖像, 並且</span><span>利用紅色連續線段標示從上方入口, 走至下方出口的路線圖</span><span>.</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323143/content/Brython.html?src=https://gist.githubusercontent.com/41323143/f13368bef594ea33da6fdde9a321a59a/raw/341e4559dfa8bb7f84555378492f4dcf467fb944/w16-3.py">w16_exam3</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 建立畫布，畫布尺寸縮小為 400x400
canvas = html.CANVAS(width=400, height=400)  
brython_div = doc["brython_div1"]  # 將畫布放置於網頁中的指定 div
brython_div &lt;= canvas

# 取得 canvas 的 2D 繪圖上下文 (context)，可以用來進行繪圖
ctx = canvas.getContext("2d")

# 每一格的像素大小，調整為 50 (原為 100)
pixel_scale = 50  # 縮小每格的像素大小

# 定義原點 (31, 14) 作為起始點偏移，並將偏移值縮小
offset_x = 32 * 2  # 偏移量仍保留為兩倍放大 (原為 32，放大後為 64)
offset_y = 10 * 2  # 偏移量仍保留為兩倍放大 (原為 10，放大後為 20)

# 定義迷宮的線條，這裡使用的是一組二維坐標來描述迷宮的邊界
lines = [
    ((0, 0), (2, 0)),
    ((3, 0), (5, 0)),
    ((5, 0), (5, 5)),
    ((3, 5), (5, 5)),
    ((5, 5), (4, 5)),
    ((4, 5), (4, 3)),
    ((4, 3), (1, 3)),
    ((1, 3), (1, 4)),
    ((3, 3), (3, 2)),
    # 第二條線
    ((0, 0), (0, 5)),
    ((0, 5), (2, 5)),
    ((2, 5), (2, 4)),
    ((2, 4), (3, 4)),
    ((0, 2), (2, 2)),
    ((2, 2), (2, 1)),
    ((1, 1), (4, 1)),
    ((4, 1), (4, 2)),
]

# 設定線條顏色為藍色
ctx.strokeStyle = "black"
# 設定線條寬度為 4 像素
ctx.lineWidth = 4

# 繪製迷宮的每一條線
for line in lines:
    start = line[0]  # 取得每條線的起點
    end = line[1]    # 取得每條線的終點
    ctx.beginPath()  # 開始繪製新的一條路徑
    ctx.moveTo(
        offset_x + start[0] * pixel_scale,  # 起點的 X 座標
        offset_y + start[1] * pixel_scale   # 起點的 Y 座標
    )
    ctx.lineTo(
        offset_x + end[0] * pixel_scale,    # 終點的 X 座標
        offset_y + end[1] * pixel_scale     # 終點的 Y 座標
    )
    ctx.stroke()  # 繪製線條

# 定義迷宮的解答路徑
path = [
    (2.5, 0),  # 入口
    (2.5, 0.5),
    (4.5, 0.5),
    (4.5, 2.5),
    (3.5, 2.5),
    (3.5, 1.5),
    (2.5, 1.5),
    (2.5, 2.5),
    (0.5, 2.5),
    (0.5, 4.5),
    (1.5, 4.5),
    (1.5, 3.5),
    (3.5, 3.5),
    (3.5, 4.5),
    (2.5, 4.5),
    (2.5, 5),  # 出口
]

# 設定線條顏色為紅色，表示路徑
ctx.strokeStyle = "red"
ctx.lineWidth = 4

# 繪製解答路徑的每一條線
for i in range(len(path) - 1):
    start = path[i]   # 取得每條路徑的起點
    end = path[i + 1]  # 取得每條路徑的終點
    ctx.beginPath()
    ctx.moveTo(
        offset_x + start[0] * pixel_scale,  # 起點的 X 座標
        offset_y + start[1] * pixel_scale   # 起點的 Y 座標
    )
    ctx.lineTo(
        offset_x + end[0] * pixel_scale,    # 終點的 X 座標
        offset_y + end[1] * pixel_scale     # 終點的 Y 座標
    )
    ctx.stroke()  # 繪製線條

# 設定字體大小為 14px Arial，並將顏色設為紅色
ctx.font = "14px Arial"
ctx.fillStyle = "red"
# 更新座標標註，顯示新的座標 (31, 43)，並將標註位置調整
ctx.fillText("(31, 43)", offset_x + 0, offset_y -10)
</pre>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<script type="text/python3">
from browser import html
from browser import document as doc

# 建立畫布，畫布尺寸縮小為 400x400
canvas = html.CANVAS(width=400, height=400)  
brython_div = doc["brython_div1"]  # 將畫布放置於網頁中的指定 div
brython_div <= canvas

# 取得 canvas 的 2D 繪圖上下文 (context)，可以用來進行繪圖
ctx = canvas.getContext("2d")

# 每一格的像素大小，調整為 50 (原為 100)
pixel_scale = 50  # 縮小每格的像素大小

# 定義原點 (31, 14) 作為起始點偏移，並將偏移值縮小
offset_x = 32 * 2  # 偏移量仍保留為兩倍放大 (原為 32，放大後為 64)
offset_y = 10 * 2  # 偏移量仍保留為兩倍放大 (原為 10，放大後為 20)

# 定義迷宮的線條，這裡使用的是一組二維坐標來描述迷宮的邊界
lines = [
    ((0, 0), (2, 0)),
    ((3, 0), (5, 0)),
    ((5, 0), (5, 5)),
    ((3, 5), (5, 5)),
    ((5, 5), (4, 5)),
    ((4, 5), (4, 3)),
    ((4, 3), (1, 3)),
    ((1, 3), (1, 4)),
    ((3, 3), (3, 2)),
    # 第二條線
    ((0, 0), (0, 5)),
    ((0, 5), (2, 5)),
    ((2, 5), (2, 4)),
    ((2, 4), (3, 4)),
    ((0, 2), (2, 2)),
    ((2, 2), (2, 1)),
    ((1, 1), (4, 1)),
    ((4, 1), (4, 2)),
]

# 設定線條顏色為藍色
ctx.strokeStyle = "black"
# 設定線條寬度為 4 像素
ctx.lineWidth = 4

# 繪製迷宮的每一條線
for line in lines:
    start = line[0]  # 取得每條線的起點
    end = line[1]    # 取得每條線的終點
    ctx.beginPath()  # 開始繪製新的一條路徑
    ctx.moveTo(
        offset_x + start[0] * pixel_scale,  # 起點的 X 座標
        offset_y + start[1] * pixel_scale   # 起點的 Y 座標
    )
    ctx.lineTo(
        offset_x + end[0] * pixel_scale,    # 終點的 X 座標
        offset_y + end[1] * pixel_scale     # 終點的 Y 座標
    )
    ctx.stroke()  # 繪製線條

# 定義迷宮的解答路徑
path = [
    (2.5, 0),  # 入口
    (2.5, 0.5),
    (4.5, 0.5),
    (4.5, 2.5),
    (3.5, 2.5),
    (3.5, 1.5),
    (2.5, 1.5),
    (2.5, 2.5),
    (0.5, 2.5),
    (0.5, 4.5),
    (1.5, 4.5),
    (1.5, 3.5),
    (3.5, 3.5),
    (3.5, 4.5),
    (2.5, 4.5),
    (2.5, 5),  # 出口
]

# 設定線條顏色為紅色，表示路徑
ctx.strokeStyle = "red"
ctx.lineWidth = 4

# 繪製解答路徑的每一條線
for i in range(len(path) - 1):
    start = path[i]   # 取得每條路徑的起點
    end = path[i + 1]  # 取得每條路徑的終點
    ctx.beginPath()
    ctx.moveTo(
        offset_x + start[0] * pixel_scale,  # 起點的 X 座標
        offset_y + start[1] * pixel_scale   # 起點的 Y 座標
    )
    ctx.lineTo(
        offset_x + end[0] * pixel_scale,    # 終點的 X 座標
        offset_y + end[1] * pixel_scale     # 終點的 Y 座標
    )
    ctx.stroke()  # 繪製線條

# 設定字體大小為 14px Arial，並將顏色設為紅色
ctx.font = "14px Arial"
ctx.fillStyle = "red"
# 更新座標標註，顯示新的座標 (31, 43)，並將標註位置調整
ctx.fillText("(31, 43)", offset_x + 0, offset_y -10)
</script>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="477" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/TlmE02QEMtg" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - w16_exam3: 41323143" width="1045"></iframe></p><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<p>  </p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><!-- 導入 brython 程式庫 --></pre>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><!-- 啟動 Brython --></pre>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><!-- editor1 開始 --></pre>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><!-- editor1 結束 --></pre>
<hr/>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><!-- ########################################## --></pre>
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><!-- editor2 開始 --></pre>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><!-- editor2 結束 --></pre>
<hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>